#!/usr/bin/env node

const commander = require('commander')
const POSVJS = require('./index')
const pjson = require('./package.json')
const { prompt } = require('inquirer')
const fs = require('fs')
const path = require('path')
const os = require('os')
const ethers = require('ethers')

let configPath = path.resolve(process.cwd(), '.env')
if (fs.existsSync(path.resolve(require('os').homedir(), '.posv'))) {
    configPath = path.resolve(require('os').homedir(), '.posv')
}

require('dotenv').config({ path: configPath })

if ((process.argv.indexOf('--help') < 0) && (process.argv.indexOf('init') < 0)
    && (process.argv.indexOf('config') < 0)) {
    if (!process.env.ENDPOINT || !process.env.USER_PKEY) {
        console.log('Run `posv init` to setup environment')
        process.exit(1)
    }
}

const posv = new POSVJS(
    process.env.ENDPOINT,
    process.env.USER_PKEY)

commander
    .version(pjson.version)
    .description('TomoChain POSV CLI')

commander
    .command('init')
    .description('setup/init environment')
    .option('-p, --password <password>', 'password', '')
    .option('-k, --keystore <keystore>', 'path to keystore file', '')
    .action(async (params) => {
        const questions = [{
            type : 'input',
            name : 'endpoint',
            message : 'Enter RPC endpoint (default: http://locahost:8545)...',
            default: 'http://localhost:8545'

        }]
        if (!params.keystore) {
            questions.push({
                type : 'password',
                name : 'traderPKey',
                message : 'Enter trader private key (default: Random)...'
            })
        }
        prompt(questions).then(async answers => {
            try {
                let posvPath = path.resolve(require('os').homedir(), '.posv')
                let address = ''

                if (params.keystore) {
                    let keydata = fs.readFileSync(params.keystore);
                    let json = JSON.parse(keydata);
                    let wallet = await ethers.Wallet.fromEncryptedJson(JSON.stringify(json), params.password)
                    answers.userPKey = wallet.privateKey
                    address = wallet.address
                }

                if (!answers.userPKey) {
                    let randomWallet = ethers.Wallet.createRandom()
                    answers.userPKey = randomWallet.privateKey
                    address = randomWallet.address
                } else {
                    let wallet = new ethers.Wallet(answers.userPKey)
                    address = wallet.address
                }
                fs.writeFile(posvPath, `ENDPOINT=${answers.endpoint}\nUSER_PKEY=${answers.userPKey}\nUSER_ADDR=${address}\n`, function (err) {
                    if (err) throw err;
                    console.log('Address:', address);
                    console.log('Saved!');
                })
            } catch(e) {
                console.log(e)
            }
        })
    })

commander
    .command('info')
    .description('show environment')
    .action(() => {
        console.log(`
        configPath: ${configPath}
        ENDPOINT: ${process.env.ENDPOINT}
        USER_ADDR: ${process.env.USER_ADDR}
        USER_PKEY: ******
        `)
    })

commander
    .command('stake')
    .description('stake TOMO to a masternode candidate')
    .requiredOption('-a, --amount <amount>', 'amount (TOMO)')
    .requiredOption('-s, --node <node>', 'node coinbase address')
    .action(async (params) => {
        await posv.stake({
                amount: params.amount,
                node: params.node
        }).then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })

commander
    .command('unstake')
    .description('unstake TOMO from a masternode candidate')
    .requiredOption('-a, --amount <amount>', 'amount (TOMO)')
    .requiredOption('-s, --node <node>', 'node coinbase address')
    .action(async (params) => {
        await posv.unstake({
                amount: params.amount,
                node: params.node
        }).then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })

commander
    .command('propose')
    .description('propose a new masternode candidate')
    .requiredOption('-a, --amount <amount>', 'amount (TOMO)')
    .requiredOption('-s, --node <node>', 'node coinbase address')
    .action(async (params) => {
        await posv.propose({
                amount: params.amount,
                node: params.node
        }).then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })

commander
    .command('resign')
    .description('resign a masternode candidate')
    .requiredOption('-s, --node <node>', 'node coinbase address')
    .action(async (params) => {
        await posv.resign({
                node: params.node
        }).then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })

commander
    .command('getWithdrawBlockNumbers')
    .description('show blocknumbers to withdraw TOMO after unstake/resign')
    .action(async (params) => {
        await posv.getWithdrawBlockNumbers()
        .then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })

commander
    .command('withdraw')
    .description('withdraw TOMO with specify Blocknumber after unstake/resign')
    .requiredOption('-b, --blockNumber <blockNumber>', 'Block number')
    .requiredOption('-i, --index <index>', 'Block number index')
    .action(async (params) => {
        await posv.withdraw({
                blockNumber: params.blockNumber,
                index: params.index
        }).then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })

commander
    .command('withdrawAll')
    .description('withdraw all available TOMO after unstake/resign')
    .action(async (params) => {
        await posv.withdrawAll()
        .then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })


commander.parse(process.argv)
